/* Copyright 2014 Rick Warren
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package rickbw.incubator.random;

import java.util.Iterator;
import java.util.Objects;
import java.util.Random;

import com.google.common.base.Preconditions;
import com.google.common.base.Supplier;
import com.google.common.collect.FluentIterable;


/**
 * A presentation of an endless sequence of random values based on
 * {@link Iterable}. This abstraction allows application code to depend solely
 * on Iterable (or {@link Iterator}) rather than on {@link Random}, making it
 * easier to swap out different value-generation schemes. For example, it
 * might be convenient to inject fixed sequences of values for testing
 * purposes.
 *
 * Underlying values are generated by an instance of {@link Random}.
 */
public final class RandomSequence {

    private final Supplier<? extends Random> random;


    public static RandomSequence from(final Supplier<? extends Random> random) {
        return new RandomSequence(random);
    }

    public FluentIterable<Integer> integers() {
        return this.intIterable;
    }

    public FluentIterable<Integer> integersZeroTo(final int upperBoundExclusive) {
        return new BoundedIntIterable(upperBoundExclusive);
    }

    public FluentIterable<Double> fractions() {
        return this.doubleIterable;
    }

    public FluentIterable<Double> guassians() {
        return this.guassianIterable;
    }

    public FluentIterable<Boolean> booleans() {
        return this.booleanIterable;
    }

    public FluentIterable<Long> longs() {
        return this.longIterable;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final RandomSequence other = (RandomSequence) obj;
        return this.random.equals(other.random);
    }

    @Override
    public int hashCode() {
        return 31 + this.random.hashCode();
    }

    private Random random() {
        return this.random.get();
    }

    private RandomSequence(final Supplier<? extends Random> random) {
        this.random = Objects.requireNonNull(random);
    }


    private static abstract class RandomIterator<T> implements Iterator<T> {
        @Override
        public boolean hasNext() {
            return true;
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

    private final class BoundedIntIterable extends FluentIterable<Integer> {
        private final int upperBoundExclusive;

        private final RandomIterator<Integer> iterator = new RandomIterator<Integer>() {
            @Override
            public Integer next() {
                return random().nextInt(upperBoundExclusive);
            }
        };

        public BoundedIntIterable(final int upperBoundExclusive) {
            this.upperBoundExclusive = upperBoundExclusive;
            Preconditions.checkArgument(this.upperBoundExclusive > 0, "Upper bound must be > 0");
        }

        @Override
        public Iterator<Integer> iterator() {
            return this.iterator;
        }
    }

    /**
     * TODO: Lazily initialize this (and similar) field(s).
     */
    private final FluentIterable<Integer> intIterable = new FluentIterable<Integer>() {
        private final RandomIterator<Integer> iterator = new RandomIterator<Integer>() {
            @Override
            public Integer next() {
                return random().nextInt();
            }
        };

        @Override
        public Iterator<Integer> iterator() {
            return this.iterator;
        }
    };

    private final FluentIterable<Long> longIterable = new FluentIterable<Long>() {
        private final RandomIterator<Long> iterator = new RandomIterator<Long>() {
            @Override
            public Long next() {
                return random().nextLong();
            }
        };

        @Override
        public Iterator<Long> iterator() {
            return this.iterator;
        }
    };

    private final FluentIterable<Double> doubleIterable = new FluentIterable<Double>() {
        private final RandomIterator<Double> iterator = new RandomIterator<Double>() {
            @Override
            public Double next() {
                return random().nextDouble();
            }
        };

        @Override
        public Iterator<Double> iterator() {
            return this.iterator;
        }
    };

    private final FluentIterable<Double> guassianIterable = new FluentIterable<Double>() {
        private final RandomIterator<Double> iterator = new RandomIterator<Double>() {
            @Override
            public Double next() {
                return random().nextGaussian();
            }
        };

        @Override
        public Iterator<Double> iterator() {
            return this.iterator;
        }
    };

    private final FluentIterable<Boolean> booleanIterable = new FluentIterable<Boolean>() {
        private final RandomIterator<Boolean> iterator = new RandomIterator<Boolean>() {
            @Override
            public Boolean next() {
                return random().nextBoolean();
            }
        };

        @Override
        public Iterator<Boolean> iterator() {
            return this.iterator;
        }
    };

}
